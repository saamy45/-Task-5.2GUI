import tkinter as tk
import RPi.GPIO as GPIO

# GPIO setup using BCM numbering
GPIO.setmode(GPIO.BCM)

# Define GPIO pins for the LEDs
RED_LED_PIN = 18
YELLOW_LED_PIN = 23
BLUE_LED_PIN = 24

# Set the GPIO pins as outputs
GPIO.setup(RED_LED_PIN, GPIO.OUT)
GPIO.setup(YELLOW_LED_PIN, GPIO.OUT)
GPIO.setup(BLUE_LED_PIN, GPIO.OUT)

# Setup PWM for LEDs (1000 Hz)
red_pwm = GPIO.PWM(RED_LED_PIN, 1000)
yellow_pwm = GPIO.PWM(YELLOW_LED_PIN, 1000)
blue_pwm = GPIO.PWM(BLUE_LED_PIN, 1000)

# Start PWM with 0% duty cycle (LEDs off)
red_pwm.start(0)
yellow_pwm.start(0)
blue_pwm.start(0)

# Function to update LED intensities based on slider value
def update_intensities(value):
    red_pwm.ChangeDutyCycle(int(red_slider.get()))
    yellow_pwm.ChangeDutyCycle(int(yellow_slider.get()))
    blue_pwm.ChangeDutyCycle(int(blue_slider.get()))

# Tkinter GUI setup
root = tk.Tk()
root.title("LED Brightness Control")

# Red LED intensity slider
red_slider = tk.Scale(root, from_=0, to=100, orient=tk.HORIZONTAL, label="Red LED", command=update_intensities)
red_slider.pack(pady=10)

# Yellow LED intensity slider
yellow_slider = tk.Scale(root, from_=0, to=100, orient=tk.HORIZONTAL, label="Yellow LED", command=update_intensities)
yellow_slider.pack(pady=10)

# Blue LED intensity slider
blue_slider = tk.Scale(root, from_=0, to=100, orient=tk.HORIZONTAL, label="Blue LED", command=update_intensities)
blue_slider.pack(pady=10)

# Exit button to stop PWM and cleanup GPIO
tk.Button(root, text="Exit", command=lambda: [GPIO.cleanup(), root.quit()]).pack(pady=20)

# Start the Tkinter event loop
root.mainloop()

# Cleanup GPIO after exiting the GUI
GPIO.cleanup()
